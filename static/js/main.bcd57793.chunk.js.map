{"version":3,"sources":["component/chats_counter/useEffectChatsCounter.js","App.js","reportWebVitals.js","index.js"],"names":["UseEffectChatsCounter","useState","count","setCount","useEffect","document","title","className","onClick","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"0PAsBeA,EAlBe,WAC1B,MAAyBC,mBAAS,GAAlC,mBAAOC,EAAP,KAAaC,EAAb,KAQA,OANJC,qBAAW,WAEXC,SAASC,MAAT,iBAA2BJ,EAA3B,QAKQ,sBAAKK,UAAY,UAAjB,UACA,oBAAIA,UAAY,QAAhB,yCACI,oBAAIA,UAAU,QAAd,SAAuBL,IACvB,wBAAQK,UAAW,MAAMC,QAAY,kBAAML,EAASD,EAAQ,IAA5D,0BCLGO,MARf,WACE,OACE,qBAAKF,UAAU,MAAf,SACE,cAAC,EAAD,OCKSG,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFhB,SAASiB,eAAe,SAM1BZ,M","file":"static/js/main.bcd57793.chunk.js","sourcesContent":["import React,{useState,useEffect} from 'react'\r\nimport '../chats_counter/chats.css';\r\n\r\n\r\nconst UseEffectChatsCounter = () => {\r\n    const [count,setCount] = useState(0);\r\n\r\nuseEffect (() => {\r\n   /* console.log(\"hello useeffect\"); use effect is also called sideEffect as it works at the end,but it runs atleaset once and useState reranders it everytime.*/\r\ndocument.title = `Chats (${count})` //`Chats ${count}` \r\n});\r\n//console.log(\"hello outside\");  This will display first and it is inside the function.\r\n\r\n    return (\r\n        <div className = \"counter\">\r\n        <h2 className = \"count\">Chat Counter App-Use Effect</h2>\r\n            <h1 className=\"count\">{count}</h1>\r\n            <button className= \"btn\" onClick = { () => setCount(count + 1 )} >Click me</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UseEffectChatsCounter\r\n","\nimport './App.css';\nimport UseEffectChatsCounter from './component/chats_counter/useEffectChatsCounter';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <UseEffectChatsCounter />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}